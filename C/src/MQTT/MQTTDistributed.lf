/**
 * Test case for MQTT pub/sub. In this version, the publisher and
 * subscriber are mapped to distinct federates. The code generator
 * produces three programs, bin/MQTTDistributed_RTI,
 * bin/MQTTDistributed_source, and bin/MQTTDistributed_destination,
 * plus a script bin/MQTTDistributed that runs all three.
 * 
 * The publisher sends a sequence of strings, and at the MQTTSubscriber
 * reactor, the offset parameter gives the logical time increment
 * between the publisher and the subscriber. If this offset is greater
 * than the physical latency from the MessageGenerator through MQTT
 * to the MQTTSubscriber, plus the clock synchronization error,
 * then the timestamps at the receiver will be deterministic.
 * They are the sender's timestamp plus the offset.
 * Otherwise, the timestamps will be larger and will match the
 * physical time at which the subscriber receives the message.
 * Since the source and destination are running in the same
 * executable, there is no clock synchronization error.
 * However, the interprocess communication seems rather high.
 * On a Mac, I am seeing latencies on the order of one second.
 * 
 * To measure the total communication latency from the MessageGenerator,
 * through the publisher and through MQTT, set the offset to 0.
 * In this case, the subscriber will always issue a warning and
 * retimestamp the received
 * message using physical time. At the end of execution, when the
 * timeout expires, the average and maximum latency will be printed.
 * 
 * To get deterministic timestamps, the offset needs to be larger
 * than the total latency. An offset of 2 sec seems to be required.
 * 
 * Prerequisites:
 * 
 * To get this example to compile, you will need to install the Paho
 * MQTT client library, which requires that you first install
 * openSSL. To run the compiled code, you will need to have an
 * MQTT broker, such as mosquitto, running.
 * 
 * The Eclipse Paho library for MQTT clients can be obtained here:
 * [https://github.com/eclipse/paho.mqtt.c].
 * 
 * This openSSL library (see [https://www.openssl.org]) is here:
 * [https://github.com/openssl/openssl.git].
 * 
 * Finally, you need an MQTT broker to be running. For example,
 * the Mosquitto Eclipse project provides one that can be downloaded
 * at [https://mosquitto.org/download/].
 * Alternatively, on a Mac, you can use homebrew:
 * 
 *     brew install mosquitto
 * 
 * To start the broker and test it, you can do this:
 * 
 * 1. Start the broker in the background:
 *     > mosquitto &
 * 2. Start a command-line subscriber:
 *     > mosquitto_sub -v -t 'test/topic'
 * 3. In another terminal window, publish a message:
 *     > mosquitto_pub -t 'test/topic' -m 'Hello World'
 * 
 * @author Ravi Akella
 * @author Edward A. Lee
 */
target C {
    cmake-include: [
        "include/paho-extension.cmake", 
        "include/mosquitto-extension.cmake"],
    timeout: 10 secs,
    coordination: centralized,
};

import MQTTPublisher from "lib/MQTTPublisher.lf";
import MQTTSubscriber from "lib/MQTTSubscriber.lf";
import MessageGenerator, PrintMessage from "lib/MQTTTestReactors.lf";

reactor Source {
    msg = new MessageGenerator(root = "Hello World");
    pub = new MQTTPublisher(
        topic = "my/test",
        address = "tcp://localhost:1883",
        clientID = "TestPublisher"
    );
    msg.message->pub.in;
}

reactor Destination {
    sub = new MQTTSubscriber(
        address = "tcp://localhost:1883",
        clientID = "TestSubscriber2",
        topic = "my/test",
        use_physical_time = false,
        offset = 0 sec
    );
    dsp = new PrintMessage();
    sub.message->dsp.message;
}

federated reactor {
    source = new Source();
    destination = new Destination();
}
