/**
 * Test case for MQTT pub/sub. In this version, the publisher and
 * subscriber are running in the same single executable program.
 * See MQTTDistributed for the more interesting case where they
 * are in separate programs. This version uses a fixed offset
 * at the subscriber to attempt to attempt to get a deterministic
 * timestamp for the received message.  The timestamp will be equal
 * to the timestamp at the sender plus the offset if the total delay
 * of communication through the MQTT broker is less than the offset.
 * See MQTTPhysical for a version that assigns a nondeterministic
 * timestamp at the receiving end based on the physical time of arrival.
 * 
 * The publisher sends a sequence of strings, and at the MQTTSubscriber
 * reactor, the offset parameter gives the logical time increment
 * between the publisher and the subscriber.
 * If this offset is greater than the physical
 * latency of communication through MQTT (plus any clock synchronization
 * error), then the timestamps at the receiver will be deterministic.
 * They are the sender's timestamp plus the offset.
 * Otherwise, the timestamps will be larger and will match the
 * physical time at which the subscriber receives the message.
 * Since the publisher and subscriber are running in the same
 * executable, there is no clock synchronization error and the
 * communication latency should be relatively low. One to five
 * milliseconds seems typical, although the very first communication
 * seems to have much larger delay.
 * 
 * Prerequisites:
 * 
 * To get this example to compile, you will need to install the Paho
 * MQTT client library, which requires that you first install
 * openSSL. To run the compiled code, you will need to have an
 * MQTT broker, such as mosquitto, running.
 * 
 * The Eclipse Paho library for MQTT clients can be obtained here:
 * https://github.com/eclipse/paho.mqtt.c.
 * 
 * This openSSL library (see https://www.openssl.org) is here:
 * https://github.com/openssl/openssl.git
 * 
 * Finally, you need an MQTT broker to be running. For example,
 * the Mosquitto Eclipse project provides one that can be downloaded
 * at https://mosquitto.org/download/.
 * Alternatively, on a Mac, you can use homebrew:
 * 
 *     brew install mosquitto
 * 
 * To start the broker and test it, you can do this:
 * 
 * 1. Start the broker in the background:
 *     > mosquitto &
 * 2. Start a command-line subscriber:
 *     > mosquitto_sub -v -t 'test/topic'
 * 3. In another terminal window, publish a message:
 *     > mosquitto_pub -t 'test/topic' -m 'Hello World'
 * 
 * @author Ravi Akella
 * @author Edward A. Lee
 */
target C {
    cmake-include: [
        "include/paho-extension.cmake", // For #include "MQTTClient.h"
        "include/net_utils.cmake"       // For encode_int64()
    ],
    timeout: 10 secs,
};
  
import MQTTPublisher from "lib/MQTTPublisher.lf";
import MQTTSubscriber from "lib/MQTTSubscriber.lf";
import MessageGenerator, PrintMessage from "lib/MQTTTestReactors.lf";

main reactor {
    pub = new MQTTPublisher(
        topic = "my/test",
        address = "tcp://localhost:1883",
        clientID = "TestPublisher"
    );
    msg = new MessageGenerator(root = "Hello World");
    msg.message->pub.in;
    
    sub = new MQTTSubscriber(
        address = "tcp://localhost:1883",
        clientID = "TestSubscriber",
        topic = "my/test",
        use_physical_time = false,
        offset = 0
    );
    dsp = new PrintMessage();
    sub.message->dsp.message;
}
