/* Reactors used for contained version of 
 * player AI in PacManWFSM.lf
 */

target Python {
    files: ["include/AIPacSupport.py"]
};

preamble {=
    # must import some file for setup functions
    import AIPacSupport as ai
=}

### Ticker Reactor
reactor Ticker(width(0), height(0), image("images/Trollman.png"), character_class({=pacman.Player=})) {
    timer ticker(0, 100msec)
    
    input wall_list # Receive updated wall list
    input gate_list # Receive updated gate list
    input[4] ghost_sprites
    input icon
    input eat_result
    input avoid_result
    input chase_result
    input game_over
    
    state character_instance
    state _wall_list
    state _gate_list
    state _pause(False)
    state _active(True)
    
    output[7] result
    output sprite
    output icon_name
    output playerpause
    output restart
    
    reaction(startup) -> icon_name {=
        dirname = os.path.dirname(__file__)
        icon_name.set(os.path.join(dirname, self.image))
    =}

    reaction(icon) -> sprite {=
        self.character_instance = self.character_class(self.width, self.height, icon.value)
        sprite.set(self.character_instance)
    =}

    reaction(wall_list, gate_list) {=
        self._wall_list = wall_list.value
        self._gate_list = gate_list.value
    =}
    
    reaction(ticker) -> playerpause, restart, sprite {=
        keyboard_events = pacman.pygame.event.get()
        for event in keyboard_events:
            if event.type == pacman.pygame.QUIT:
                request_stop()
                
            if event.type == pacman.pygame.KEYDOWN:
                if event.key == pacman.pygame.K_ESCAPE:
                    request_stop()
                if event.key == pacman.pygame.K_r or event.key == pacman.pygame.K_RETURN:
                    restart.set(True)
                    self.character_instance.resetpos()
                    self._pause = False
                    self._active = True
                    print(self.character_instance.rect.left)
                    
                if event.key == pacman.pygame.K_SPACE:
                    if self._pause is False:
                        self._pause = True
                    else:
                        self._pause = False
        playerpause.set(self._pause)
        sprite.set(self.character_instance)
        for i, port in enumerate(result):
            if i == 0:
                port.set(True)
            elif i == 1:
                port.set(self.character_instance)
            elif i == 2:
                port.set(self._wall_list)
            elif ghost_sprites.is_present:
                port.set(ghost_sprites[i - 3])

    =}
    
    reaction(eat_result, chase_result, avoid_result) {=
        if self._pause is False:
            if avoid_result.is_present:
                self.character_instance = avoid_result.value
            elif chase_result.is_present:
                self.character_instance = chase_result.value
            elif eat_result.is_present:
                self.character_instance = eat_result.value
    =}
    
    reaction(game_over) {=
        self._active = False
        self._pause = True
        self.character_instance.speedzero()
    =}
}

### Ghost Close? Condition Reactor
reactor Close {
    input[7] tick
    input wall_list
    state layout
    output[7] result
    
    reaction(tick) -> result {=
        all_present = True
        #result_bool = True
        ghost_list = []
        for i, port in enumerate(tick):
            if port.is_present:
                if i >= 3:
                    ghost_list.append(tick[i])
            else:
                all_present = False
        if all_present and ai.closestghostdist(tick[2].value, ghost_list, tick[1].value.rect.left, tick[1].value.rect.top) > 4:
            for i, port in enumerate(result):
                if i == 0:
                    port.set(False)
                else:
                    port.set(tick[i])
        else:
            result.set(tick)
    =}
    
}

### Ghost Scared? Condition Reactor
reactor Scared {
    input[7] tick
    input frenzy
    state frenzy(False)
    output[7] result
    
    reaction(tick) -> result {=
        
        result.set(self._system)
    =}

    reaction(frenzy) {=
        self._frenzy = frenzy.value
    =}

}

### Chase Ghost Action Reactor
reactor Chase {
    input[7] tick
    state system
    output result
    
    reaction(tick) -> result {=
        
        result.set(self._system)
    =}
}

### Avoid Ghost Action Reactor

reactor Avoid {
    input[7] tick
    output result
    
    reaction(tick) -> result {=
        
        result.set(self._system)
    =}
}

### Eat Pills Action Reactor

reactor Eat {
    input[7] tick
    input block_list
    state _block_list
    state character_instance    
    output result
    
    reaction(tick) -> result {=
        if tick[0].is_present and not tick[0].value:
            all_present = True
            ghost_list = []
            for i, port in enumerate(tick):
                if port.is_present:
                    if i >= 3:
                        ghost_list.append(tick[i])
                else:
                    all_present = False
            if all_present:
                self.character_instance = tick[1].value
                self.character_instance.ai_eat(tick[2].value, ghost_list, self._block_list)
                result.set(self.character_instance)
    =}

    reaction(block_list) {=
        self._block_list = block_list.value
    =}
}


